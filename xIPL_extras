#!/usr/bin/env bash

# Created by: Ohkthx (Schism)
# Purpose of file: This is responsible for installing, patching,
#   and launching a ClassicUO Ultima Online client. It has several
#   requirements that can be seen inside of the README.md file on
#   the main repo.

# Wine variables for installation directory (WINE_PREFIX), and architecture.
WINE_PREFIX="$HOME/.wine_ultimaonline"
WINE_ARCH="win64" # WINE_ARCH has to be win64, ClassicUO is 64-bit.

# Location that the UOPatcher files will be accessible.
UOPATCHER_CORE="./uopatcher/uopatcher/core.py"
UOPATCHER_CONFIG="./config.ini"

# Server files and ClassicUO location.
UO_ROOT="uoinstall"
UO_SHARD_CLIENT_DIR="ClassicUO"
UO_SHARD_CLIENT="ClassicUO.exe"
UO_SHARD_CLIENT_FLAGS="-force_driver 1"

# Updating Shard Information
SHARD_INFO_FILE="./shard_info"

function get_shard_config
{
  echo "  [--] Pulling Shard '$1' configuration."
  REMOTE_RESOURCE="https://raw.githubusercontent.com/Ohkthx/xIPL/main/shards/$1"

  # Check which package we are using to pull the updates.
  PULLER_EXE=""
  if command -v curl &> /dev/null; then
    PULLER_EXE="curl"
  elif command -v wget &> /dev/null; then
    PULLER_EXE="wget"
  fi

  if [[ "$PULLER_EXE" == "" ]]; then
    echo "  [!!] Could not resolve download tool, requires 'curl' or 'wget'"
    exit
  fi

  # Get the headers of the extras file.
  HEADERS="content-length: 0"
  case "$PULLER_EXE" in
    curl)
      HEADERS=$(curl -sI "$REMOTE_RESOURCE")
      ;;
    wget)
      HEADERS=$(wget -q -S -O - "$REMOTE_RESOURCE" 2>&1)
      ;;
  esac

  # Extract and clean the content-length of whitespace.
  CLENGTH=$(echo "$HEADERS" | grep -i content-length | awk -F ': ' '{print $2}')
  CLENGTH="${CLENGTH//[$'\t\r\n ']}"

  # Attempt to get the new extras file.
  if [[ "$CLENGTH" -gt 32 ]]; then
    case "$PULLER_EXE" in
      curl)
        curl -so "$SHARD_INFO_FILE" "$REMOTE_RESOURCE"
        ;;
      wget)
        wget -q "$REMOTE_RESOURCE" -O "$SHARD_INFO_FILE"
        ;;
    esac

    if [ -f "$SHARD_INFO_FILE" ]; then
      echo "  [++] Pulled Shard '$1' configuration."
    else
      echo "  [!!] Failed to download Shard '$1' configuration."
      exit
    fi
  else
    echo "  [!!] Could not located remote shard file."
    exit
  fi
}

# Checks to make sure WINE is installed, along with its requirements.
function install_wine
{
  REQUIRE_BREW="false"

  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo -e "\n[++] Detected OS: Linux"
  elif [[ "$OSTYPE" == "cygwin"* ]]; then
    echo -e "\n[++] Detected OS: Window (Cygwin)"
  elif [[ "$OSTYPE" == "freebsd"* ]]; then
    echo -e "\n[++] Detected OS: FreeBSD"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo -e "\n[++] Detected OS: MacOS"
    REQUIRE_BREW="true"
    if ! command -v brew &> /dev/null; then
      echo "  [!!] Brew is required and not installed."
      exit
    fi
  fi

  echo "[--] Check WINE and WINETRICKS installation."
  if ! command -v perl &> /dev/null; then
    echo "  [!!] Perl is required and not installed."
    exit
  elif ! command -v git &> /dev/null; then
    echo "  [!!] Git is required and not installed."
    exit
  elif ! command -v python3 &> /dev/null; then
    echo "  [!!] Python 3 (3.9.1) is required and not installed."
    exit
  fi

  if ! command -v wine &> /dev/null; then
    echo "  [!!] Wine is required and not installed."
    if [[ "$REQUIRE_BREW" == "true" ]]; then
      # Install it via Brew if it is MacOS.
      brew install --cask --no-quarantine gcenx/wine/wine-crossover > /dev/null 2>&1
    else
      exit
    fi
  fi

  if ! command -v winetricks &> /dev/null; then
    echo "  [!!] Winetricks is required and not installed."
    if [[ "$REQUIRE_BREW" == "true" ]]; then
      # Install it via Brew if it is MacOS.
      brew install --formula gcenx/wine/winetricks > /dev/null 2>&1
    else
      exit
    fi
  fi
  echo "[++] WINE and WINETRICKS installation good."
}

# Checks to make sure the WINETRICKS packages are installed.
function install_winetricks
{
  echo "[--] Checking WINETRICKS packages."
  PACKAGES=$(WINEPREFIX="$WINE_PREFIX" WINEARCH="$WINE_ARCH" winetricks list-installed)

  echo -e "  [--] Checking: 'dotnet48' installed."
  DOTNET48=$(echo "$PACKAGES" | grep dotnet48)
  if [ -z "$DOTNET48" ]; then
    echo -e "    [!!] 'dotnet48' is missing, installing."
    WINEPREFIX="$WINE_PREFIX" WINEARCH="$WINE_ARCH" winetricks dotnet48 > /dev/null 2>&1
  fi
  echo -e "  [++] Has: 'dotnet48' installed."

  echo -e "  [--] Checking: 'corefonts' installed."
  COREFONTS=$(echo "$PACKAGES" | grep corefonts)
  if [ -z "$COREFONTS" ]; then
    echo -e "    [!!] 'corefonts' is missing, installing."
    WINEPREFIX="$WINE_PREFIX" WINEARCH="$WINE_ARCH" winetricks corefonts > /dev/null 2>&1
  fi
  echo -e "  [++] Has: 'corefonts' installed."
  echo -e "[++] WINETRICKS packages are installed."
}

# Checks to make sure UOPatcher is installed.
function install_uopatcher
{
  echo "[--] Checking: UOPatcher installation."

  if [ ! -f "$UOPATCHER_CORE" ]; then
    echo "  [!!] UOPatcher has not been downloaded."
    git clone https://github.com/Ohkthx/uopatcher > /dev/null 2>&1
    echo "  [++] UOPatcher downloaded."
  fi

  # Pull the updated shard configuration.
  get_shard_config "$1"
  if [ ! -f "$SHARD_INFO_FILE" ]; then
    echo "  [!!] Shard Information file missing, cannot continue."
    exit
  fi

  # Load the shard information file
  . "$SHARD_INFO_FILE"

  if [ -f "$UOPATCHER_CONFIG" ]; then
    # Update the settings.
    perl -pi -e "s'^remote_root = .*'remote_root = ${UO_SHARD_ROOT}'g" "$UOPATCHER_CONFIG"
    perl -pi -e "s'^remote_port = .*'remote_port = ${UO_SHARD_PORT}'g" "$UOPATCHER_CONFIG"
  else
    # Create the configuration
    { cat << EOF
[DEFAULT]
debug = False
skip_prompt = True
verbose = False
local_root = $UO_ROOT
remote_root = $UO_SHARD_ROOT
remote_port = $UO_SHARD_PORT
EOF
    } > "$UOPATCHER_CONFIG"
  fi

  echo -e "[++] UOPatcher installed.\n"
  echo "[++] Loaded Shard Info: $UO_SHARD_NAME"
  echo "[++] Shard Remote Root: $UO_SHARD_ROOT"
  echo -e "[++] Shard Remote Port: $UO_SHARD_PORT\n"
}

# Validates WINEs Registry.
function patch_wine_registry
{
  echo "[--] Checking WINE Registry."

  REG_FILE="$WINE_PREFIX/user.reg"
  NEEDS_INJECT="true"

  # Replace the managed setting.
  echo "  [--] Checking if MANAGED is set."
  MANAGED_SET=$(grep -a10 "X11 Driver" "$REG_FILE" | grep "Managed")
  if [ -n "$MANAGED_SET" ]; then
    # Edit the registry to "N" if it is "Y"
    NEEDS_INJECT="false"
    echo "    [!!] Setting 'Managed Window Management' to OFF."
    perl -pi -e 's/"Managed"="Y"/"Managed"="N"/g' "$REG_FILE"
  fi
  echo "  [++] 'Managed Window Management' is correct."

  # Replace the decorated setting.
  echo "  [--] Checking if DECORATED is set."
  DECORATED_SET=$(grep -a10 "X11 Driver" "$REG_FILE" | grep "Decorated")
  if [ -n "$DECORATED_SET" ]; then
    # Edit the registry to "N" if it is "Y"
    NEEDS_INJECT="false"
    echo "    [!!] Setting 'Decorated Window Management' to OFF."
    perl -pi -e 's/"Decorated"="Y"/"Decorated"="N"/g' "$REG_FILE"
  fi
  echo "  [++] 'Decorated Window Management' is correct."

  # Add the registry additions to the end of the file.
  if [[ "$NEEDS_INJECT" == "true" ]]; then
    echo "  [!!] WINE Registry Injecting to: $REG_FILE"
    { echo -e "\n[Software\\Wine\\X11 Driver]"
      echo '"Managed"="N"'
      echo '"Decorated"="N"'
    } >> "$REG_FILE"
    echo "  [++] WINE Registry Injecting completed."
  fi
  echo "[++] WINE Registry checks completed."
}

# Patches the local client, installing any missing files.
function patch_client
{
  echo "[--] Patching: Client with UOPatcher."

  if [ ! -f "$UOPATCHER_CORE" ]; then
    echo "  [!!] UOPatcher has not been downloaded."
    exit
  fi

  PYTHON_EXE="python3"
  if command -v python3.11 &> /dev/null; then
    PYTHON_EXE="python3.11"
  elif command -v python3.10 &> /dev/null; then
    PYTHON_EXE="python3.10"
  elif command -v python3.9 &> /dev/null; then
    PYTHON_EXE="python3.9"
  elif command -v python3 &> /dev/null; then
    PYTHON_EXE="python3"
  elif command -v python &> /dev/null; then
    PYTHON_EXE="python"
  else
    echo "  [!!] Could not locate python installation."
    exit
  fi

  # Run the patcher.
  echo -e "\n"
  $PYTHON_EXE "$UOPATCHER_CORE"
  echo -e "\n"

  echo "[++] Client patched."
}

function launch_client
{
  echo "[++] Starting client."
  if [ ! -d "./$UO_ROOT/$UO_SHARD_CLIENT_DIR" ]; then
    echo "  [!!] Client directory missing, bad installation."
    exit
  elif [ ! -f "./$UO_ROOT/$UO_SHARD_CLIENT_DIR/$UO_SHARD_CLIENT" ]; then
    echo "  [!!] Client missing, bad installation."
    exit
  fi

  cd "./$UO_ROOT/$UO_SHARD_CLIENT_DIR" || exit
  WINEPREFIX="$WINE_PREFIX" WINEARCH="$WINE_ARCH" wine "$UO_SHARD_CLIENT" $UO_SHARD_CLIENT_FLAGS > /dev/null 2>&1
  echo "[++] Stopped client."
}

function start_ipl
{
  # Step 1: INSTALL, Ensure all files and packages are installed.
  install_wine
  install_winetricks
  install_uopatcher "$1"

  # Step 2: PATCH, Validate and modify settings/configurations and files.
  patch_wine_registry
  patch_client

  # Step 3: LAUNCH, start the client.
  launch_client
}
