#!/usr/bin/env bash

# Created by: Ohkthx (Schism)
# Purpose of file: This is responsible for installing, patching,
#   and launching a ClassicUO Ultima Online client. It has several
#   requirements that can be seen inside of the README.md file on
#   the main repo.

# Wine variables for installation directory (WINEPREFIX), and architecture.
UO_INSTALL_DIR=".wine64_ultimaonline"
WINE_PREFIX_ROOT="$HOME"
export WINEPREFIX="$WINE_PREFIX_ROOT/$UO_INSTALL_DIR"
export WINEARCH="win64"                      # WINEARCH has to be win64, ClassicUO is 64-bit.
WINETRICKS_PACKAGES=("dotnet48" "corefonts") # Some typically required packages.

# Location that the UOPatcher files will be accessible.
UOPATCHER_REMOTE="https://github.com/Ohkthx/uopatcher"
UOPATCHER_ROOT="$WINEPREFIX/drive_c/Program Files/uopatcher"
UOPATCHER_SRC="$UOPATCHER_ROOT/uopatcher"
UOPATCHER_CORE="$UOPATCHER_SRC/core.py"
UOPATCHER_CONFIG="$UOPATCHER_ROOT/config.ini"

# Server files and client location.
UO_ROOT="$WINEPREFIX/drive_c/Program Files/Ultima Online"

# Client default variables.
UO_SHARD_CLIENT="ClassicUO.exe"
UO_SHARD_CLIENT_DIR="ClassicUO"
UO_SHARD_CLIENT_FLAGS="-force_driver 1"

# Launcher default variables.
UO_SHARD_LAUNCHER="ClassicUOLauncher.exe"
UO_SHARD_LAUNCHER_DIR="."
UO_SHARD_LAUNCHER_FLAGS="-force_driver 1"

# Backup file name
BACKUP_FILE_NAME="${UO_INSTALL_DIR}.backup"
BACKUP_FILE_COMPRESSED="true"

# Updating Shard Information
SHARD_INFO_DIRECTORY="$TMPDIR"
if [ -z "$SHARD_INFO_DIRECTORY" ]; then
	if [ -d "/tmp" ]; then
		SHARD_INFO_DIRECTORY="/tmp"
	else
		echo "[!!] Could not located a temporary directory for installation."
		exit 1
	fi
fi
SHARD_INFO_FILE="$SHARD_INFO_DIRECTORY/shard_info"

PYTHON_EXE="python3"
if command -v python3.11 &>/dev/null; then
	PYTHON_EXE="python3.11"
elif command -v python3.10 &>/dev/null; then
	PYTHON_EXE="python3.10"
elif command -v python3.9 &>/dev/null; then
	PYTHON_EXE="python3.9"
elif command -v python3 &>/dev/null; then
	PYTHON_EXE="python3"
elif command -v python &>/dev/null; then
	PYTHON_EXE="python"
else
	echo "[!!] Could not locate python installation."
	exit
fi

# Checks to make sure WINE is installed, along with its requirements.
install_wine() {
	local require_brew="false"

	if [[ "$OSTYPE" == "linux-gnu"* ]]; then
		echo -e "\n[++] Detected OS: Linux"
	elif [[ "$OSTYPE" == "cygwin"* ]]; then
		echo -e "\n[++] Detected OS: Window (Cygwin)"
	elif [[ "$OSTYPE" == "freebsd"* ]]; then
		echo -e "\n[++] Detected OS: FreeBSD"
	elif [[ "$OSTYPE" == "darwin"* ]]; then
		echo -e "\n[++] Detected OS: MacOS"
		require_brew="true"
		if ! command -v brew &>/dev/null; then
			echo "  [!!] Brew is required and not installed."
			exit
		fi
	fi

	echo "[--] Check WINE and WINETRICKS installation."
	if ! command -v perl &>/dev/null; then
		echo "  [!!] Perl is required and not installed."
		exit
	elif ! command -v git &>/dev/null; then
		echo "  [!!] Git is required and not installed."
		exit
	elif ! command -v python3 &>/dev/null; then
		echo "  [!!] Python 3 (3.9.1) is required and not installed."
		exit
	fi

	if ! command -v wine &>/dev/null; then
		echo "  [!!] Wine is required and not installed."
		if [[ "$require_brew" == "true" ]]; then
			# Install it via Brew if it is MacOS.
			brew install --cask --no-quarantine gcenx/wine/wine-crossover >/dev/null 2>&1
		else
			exit
		fi
	fi

	if ! command -v winetricks &>/dev/null; then
		echo "  [!!] Winetricks is required and not installed."
		if [[ "$require_brew" == "true" ]]; then
			# Install it via Brew if it is MacOS.
			brew install --formula gcenx/wine/winetricks >/dev/null 2>&1
		else
			exit
		fi
	fi
	echo "[++] WINE and WINETRICKS installation good."
}

# Checks to make sure the WINETRICKS packages are installed.
install_winetricks() {
	echo "[--] Checking WINETRICKS packages."
	local packages
	packages=$(winetricks list-installed)

	for package in "${WINETRICKS_PACKAGES[@]}"; do
		echo -e "  [--] Checking: '$package' installed."
		local detected_package
		detected_package=$(echo "$packages" | grep "$package")
		if [ -z "$detected_package" ]; then
			echo -e "    [!!] '$package' is missing, installing."
			winetricks --force "$package" >/dev/null 2>&1
		fi
		echo -e "  [++] Has: '$package' installed."
	done

	echo -e "[++] WINETRICKS packages are installed."
}

# Checks to make sure UOPatcher is installed.
install_uopatcher() {
	echo "[--] Checking: UOPatcher installation."

	local shard_name="$1"

	if [ ! -f "$UOPATCHER_CORE" ]; then
		echo "  [!!] UOPatcher has not been downloaded."
		git clone "$UOPATCHER_REMOTE" "$UOPATCHER_ROOT" >/dev/null 2>&1
		echo "  [++] UOPatcher downloaded."
	fi

	if [ -f "$UOPATCHER_CONFIG" ]; then
		# Update the settings.
		perl -pi -e "s'^local_root = .*'local_root = ${UO_ROOT}'g" "$UOPATCHER_CONFIG"
		perl -pi -e "s'^remote_root = .*'remote_root = ${UO_SHARD_ROOT}'g" "$UOPATCHER_CONFIG"
		perl -pi -e "s'^remote_port = .*'remote_port = ${UO_SHARD_PORT}'g" "$UOPATCHER_CONFIG"
	else
		# Create the configuration
		{
			cat <<EOF
[DEFAULT]
debug = False
skip_prompt = True
verbose = True
local_root = $UO_ROOT
remote_root = $UO_SHARD_ROOT
remote_port = $UO_SHARD_PORT
EOF
		} >"$UOPATCHER_CONFIG"
	fi

	echo -e "[++] UOPatcher installed.\n"
	echo "[++] Loaded Shard Info: $shard_name"
	echo "[++] Shard Remote Root: $UO_SHARD_ROOT"
	echo -e "[++] Shard Remote Port: $UO_SHARD_PORT\n"
}

patch_shard_info() {
	echo "[--] Pulling Shard '$1' configuration."
	local resource="https://raw.githubusercontent.com/Ohkthx/xIPL/main/shards/$1"

	# Check which package we are using to pull the updates.
	local puller_exe=""
	if command -v curl &>/dev/null; then
		puller_exe="curl"
	elif command -v wget &>/dev/null; then
		puller_exe="wget"
	fi

	if [[ "$puller_exe" == "" ]]; then
		echo "[!!] Could not resolve download tool, requires 'curl' or 'wget'"
		exit
	fi

	# Get the headers of the extras file.
	local headers="content-length: 0"
	case "$puller_exe" in
	curl)
		headers=$(curl -sI "$resource")
		;;
	wget)
		headers=$(wget -q -S -O - "$resource" 2>&1)
		;;
	esac

	# Extract and clean the content-length of whitespace.
	local clength=0
	clength=$(echo "$headers" | grep -i content-length | awk -F ': ' '{print $2}')
	clength="${clength//[$'\t\r\n ']/}"

	# Attempt to get the new extras file.
	if [[ "$clength" -gt 32 ]]; then
		case "$puller_exe" in
		curl)
			curl -so "$SHARD_INFO_FILE" "$resource"
			;;
		wget)
			wget -q "$resource" -O "$SHARD_INFO_FILE"
			;;
		esac

		if [ -f "$SHARD_INFO_FILE" ]; then
			echo "[++] Pulled Shard '$1' configuration."
		else
			echo "[!!] Failed to download Shard '$1' configuration."
			exit
		fi
	else
		echo "[!!] Could not located remote shard file."
		exit
	fi

}

patch_wine() {
	echo "[--] Patching Wine, removing auto-mounted drives."

	if [ ! -d "$WINEPREFIX" ]; then
		echo "  [!!] Wine prefix does not exist... cannot continue."
		exit 1
	fi

	if [ -d "$WINEPREFIX/dosdevices" ]; then
		local plinks
		plinks=$(find "$WINEPREFIX/dosdevices/" -type l -maxdepth 1)

		# Iterate all of the mounted drives, unlinking non-C:/ drives.
		for fd in $plinks; do
			if [ -L "$fd" ]; then
				if [ "$fd" != "$WINEPREFIX/dosdevices//c:" ]; then
					unlink $fd
				fi
			fi
		done
	fi

	echo "[++] Wine patching complete."
}

patch_uopatcher() {
	echo "[--] Checking: UOPatcher Updates."

	if [ ! -f "$UOPATCHER_CORE" ]; then
		install_uopatcher "$1"
		return
	fi

	# Should not be able to trigger this.
	if [ ! -d "$UOPATCHER_ROOT" ]; then
		echo "  [!!] UOPatcher should be installed but is not."
		exit 1
	fi

	# Check and pull the update if it exists.
	local current_dir
	local lversion
	local rversion
	lversion=$($PYTHON_EXE "$UOPATCHER_CORE" --version)
	rversion=$($PYTHON_EXE "$UOPATCHER_CORE" --has-update)

	if [[ "$lversion" < "$rversion" ]]; then
		echo "  [--] UOPatcher requires an update. Updating..."
		current_dir=$(pwd)
		cd "$UOPATCHER_ROOT" || exit
		git pull >/dev/null 2>&1
		cd "$current_dir" || exit

		lversion="$rversion"
		echo "  [++] UOPatcher updated."
	fi

	echo "[++] UOPatcher check complete, current version: $lversion."
}

# Patches the local client, installing any missing files.
patch_client() {
	echo "[--] Patching: Client with UOPatcher."

	if [ ! -f "$UOPATCHER_CORE" ]; then
		echo "  [!!] UOPatcher has not been downloaded."
		exit
	fi

	# Run the patcher.
	echo -e "\n"
	$PYTHON_EXE "$UOPATCHER_CORE" --config "$UOPATCHER_CONFIG"
	echo -e "\n"

	echo "[++] Client patched."
}

launch_winecfg() {
	echo "[++] Starting winecfg."

	if ! command -v winecfg &>/dev/null; then
		echo "[!!] winecfg not accessible. Is Wine installed?"
		exit 1
	fi
	winecfg
	echo "[++] Stopped winecfg."
}

launch_client() {
	echo "[++] Starting client."
	if [ ! -d "$UO_ROOT/$UO_SHARD_CLIENT_DIR" ]; then
		echo "  [!!] Client directory missing, bad installation."
		exit
	elif [ ! -f "$UO_ROOT/$UO_SHARD_CLIENT_DIR/$UO_SHARD_CLIENT" ]; then
		echo "  [!!] Client missing, bad installation."
		exit
	fi

	cd "$UO_ROOT/$UO_SHARD_CLIENT_DIR" || exit
	wine "$UO_SHARD_CLIENT" $UO_SHARD_CLIENT_FLAGS >/dev/null 2>&1
	echo "[++] Stopped client."
}

launch_launcher() {
	echo "[++] Starting launcher."
	if [ ! -d "$UO_ROOT/$UO_SHARD_LAUNCHER_DIR" ]; then
		echo "  [!!] Launcher directory missing. Cannot start."
		exit
	elif [ ! -f "$UO_ROOT/$UO_SHARD_LAUNCHER_DIR/$UO_SHARD_LAUNCHER" ]; then
		echo "  [!!] Launcher missing. Cannot start."
		exit
	fi

	cd "$UO_ROOT/$UO_SHARD_LAUNCHER_DIR" || exit
	wine "$UO_SHARD_LAUNCHER" $UO_SHARD_LAUNCHER_FLAGS >/dev/null 2>&1
	echo "[++] Stopped launcher."
}

confirm() {
	read -r -p "Do you wish to continue? [Y/n] " input

	case $input in
	[yY][eE][sS] | [yY])
		echo "true"
		;;
	*)
		echo "false"
		;;
	esac
}

uninstall() {
	local files=(
		"$WINEPREFIX"
		"$WINE_PREFIX_ROOT/$BACKUP_FILE_NAME"
		"$WINE_PREFIX_ROOT/${BACKUP_FILE_NAME}.tgz"
		"./xIPL_extras"
		"./xIPL"
	)

	local remove="false"

	# Iterate each file, and prompt for deletion.
	for i in "${files[@]}"; do
		if [ -f "$i" ]; then
			echo -e "\nRemoving -> $i"
			remove=$(confirm "$i")
			if [[ "$remove" == "true" ]]; then
				rm -rf "$i"
				echo "  REMOVED -> $i."
			fi
		elif [ -d "$i" ]; then
			echo -e "\nRemoving -> $i"
			remove=$(confirm "$i")
			if [[ "$remove" == "true" ]]; then
				rm -rf "$i"
				echo "  REMOVED -> $i."
			fi
		fi
	done
}

backup_prefix() {
	echo "[--] Creating backup of the current WINE PREFIX."

	local filename="$BACKUP_FILE_NAME"
	if [[ "$BACKUP_FILE_COMPRESSED" == "true" ]]; then
		filename="${BACKUP_FILE_NAME}.tgz"
	fi

	# Make sure we are not overriding another backup.
	if [ -d "$filename" ]; then
		echo "Backup already exists, do you wish to override it?"
		local remove
		remove=$(confirm "$i")
		if [[ "$remove" == "false" ]]; then
			return
		fi
	fi

	# Create the backup.
	local current_dir
	if [[ "$BACKUP_FILE_COMPRESSED" == "true" ]]; then
		current_dir=$(pwd)
		cd "$WINE_PREFIX_ROOT" || exit
		tar czf "$filename" "$UO_INSTALL_DIR"
		cd "$current_dir" || exit
	else
		cp -RP "$WINEPREFIX" "$WINE_PREFIX_ROOT/$filename"
	fi

	echo "[++] Backup completed."
}

restore_prefix() {
	echo "[--] Restoring from a WINE PREFIX backup."

	# Get the backup file name or directory.
	local filename="$BACKUP_FILE_NAME"
	if [[ "$BACKUP_FILE_COMPRESSED" == "true" ]]; then
		filename="${BACKUP_FILE_NAME}.tgz"
		if [ ! -f "$WINE_PREFIX_ROOT/$filename" ]; then
			echo "  [!!] Backup does not exist."
			return
		fi
	else
		if [ ! -d "$WINE_PREFIX_ROOT/$filename" ]; then
			echo "  [!!] Backup does not exist."
			return
		fi
	fi

	# Restore from file.
	local current_dir
	if [[ "$BACKUP_FILE_COMPRESSED" == "true" ]]; then
		current_dir=$(pwd)
		cd "$WINE_PREFIX_ROOT" || exit
		tar xzf "$filename"
		cd "$current_dir" || exit
	else
		cp -RP "$WINE_PREFIX_ROOT/$filename" "$WINEPREFIX"
	fi

	echo "[++] WINE PREFIX restoration complete."
}

usage() {
	echo -e "\nusage: $1 [--no-patch] [--no-winetricks] [--uninstall] [--help]"
	echo -e "\n--help           Shows this message."
	echo "--uninstall      Uninstalls the xIPL and all associated files."
	echo "--winecfg        Starts winecfg in the proper environment."
	echo "--launcher       Starts the launcher instead of the client."
	echo -e "\n--backup         Create a backup of the WINE PREFIX."
	echo "--restore        Override current WINE PREFIX with a backup."
	echo -e "\n--no-patch       Skips patching the client."
	echo "--no-update      Skips updating the xIPL_extras file."
	echo "--no-refresh     Skips updating the shards configuration file."
	echo "--no-winetricks  Skips the Winetricks validation."
	echo -e "\nReport issues to:"
	echo -e "  https://github.com/Ohkthx/xIPL"
}

start_ipl() {
	local script_name="$0"
	local shard_name="none"
	local skip_patch="false"
	local skip_refresh="false"
	local skip_winetricks="false"
	local start_launcher="false"

	# Parse the parameters.
	while [[ $# -gt 0 ]]; do
		key="$1"
		case $key in
		--help)
			usage "$script_name"
			exit
			;;
		--shard)
			shift
			shard_name="$1"
			shift
			;;
		--uninstall)
			uninstall
			exit
			;;
		--winecfg)
			launch_winecfg
			exit
			;;
		--launcher)
			shift
			start_launcher="true"
			;;
		--backup)
			backup_prefix
			exit
			;;
		--restore)
			restore_prefix
			exit
			;;
		--no-patch)
			shift
			skip_patch="true"
			;;
		--no-refresh)
			shift
			skip_refresh="true"
			;;
		--no-winetricks)
			shift
			skip_winetricks="true"
			;;
		*)
			shift
			;;
		esac
	done

	if [[ "$skip_refresh" == "false" ]]; then
		# Pull the updated shard configuration.
		patch_shard_info "$shard_name"
	fi

	# Make sure the file exists.
	if [ ! -f "$SHARD_INFO_FILE" ]; then
		echo "[!!] Shard Information file missing, cannot continue."
		exit
	fi

	# Load the shard information file
	. "$SHARD_INFO_FILE"

	# Step 1: INSTALL, Ensure all files and packages are installed.
	install_wine
	if [[ "$skip_winetricks" == "false" ]]; then install_winetricks; fi
	install_uopatcher "$shard_name"

	# Step 2: PATCH, Validate and modify settings/configurations and files.
	patch_wine
	patch_uopatcher "$shard_name"
	if [[ "$skip_patch" == "false" ]]; then patch_client; fi

	# Step 3: LAUNCH, start the client.
	if [[ "$start_launcher" == "false" ]]; then
		launch_client
	else
		launch_launcher
	fi
}
